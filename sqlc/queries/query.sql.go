// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package shuffletui

import (
	"context"
	"database/sql"
)

const getAllUsers = `-- name: GetAllUsers :many
SELECT sshkey, username, apikey FROM sessions
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(&i.Sshkey, &i.Username, &i.Apikey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getApiKey = `-- name: GetApiKey :one
SELECT apikey FROM sessions WHERE sshkey=?
`

func (q *Queries) GetApiKey(ctx context.Context, sshkey []byte) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getApiKey, sshkey)
	var apikey sql.NullString
	err := row.Scan(&apikey)
	return apikey, err
}

const getUser = `-- name: GetUser :one
SELECT sshkey, username, apikey FROM sessions WHERE sshkey=?
`

func (q *Queries) GetUser(ctx context.Context, sshkey []byte) (Session, error) {
	row := q.db.QueryRowContext(ctx, getUser, sshkey)
	var i Session
	err := row.Scan(&i.Sshkey, &i.Username, &i.Apikey)
	return i, err
}

const insertSession = `-- name: InsertSession :one
INSERT INTO sessions (
    sshkey, username
) VALUES (
    ?, ?
)
RETURNING sshkey, username, apikey
`

type InsertSessionParams struct {
	Sshkey   []byte
	Username string
}

func (q *Queries) InsertSession(ctx context.Context, arg InsertSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, insertSession, arg.Sshkey, arg.Username)
	var i Session
	err := row.Scan(&i.Sshkey, &i.Username, &i.Apikey)
	return i, err
}
